module(
	name: "str"
	version: "0.0.1"
	author: "mightypancake"
	website: "https://axolang.com"
	license_name: "MIT"
	license: "https://www.apache.org/licenses/LICENSE-2.0.txt"
	description: "Basic string functionality"
)

use mem

#include <string.h>

#provided (@byte fn @byte, int, size_t) memchr
#provided (int fn @byte, @byte, size_t) memcmp
#provided (@byte fn @byte, @byte, size_t) memcpy
#provided (@byte fn @byte, @byte, size_t) memmove
#provided (@byte fn @byte, int, size_t) memset
#provided (@byte fn @byte, @byte) strcat
#provided (@byte fn @byte, @byte, size_t) strncat
#provided (@byte fn @byte, int) strchr
#provided (int fn @byte, @byte) strcmp
#provided (int fn @byte, @byte, size_t) strncmp
#provided (int fn @byte, @byte) strcoll
#provided (@byte fn @byte, @byte) strcpy
#provided (@byte fn @byte, @byte, size_t) strncpy
#provided (size_t fn @byte, @byte) strcspn
#provided (@byte fn int) strerror
#provided (size_t fn @byte) strlen
#provided (@byte fn @byte, @byte) strpbrk
#provided (@byte fn @byte, int) strrchr
#provided (size_t fn @byte, @byte) strspn
#provided (@byte fn @byte, @byte) strstr
#provided (@byte fn @byte, @byte) strtok
#provided (size_t fn @byte, @byte, size_t) strxfrm

fn str::alc(@byte str){
  res = mem::alc(strlen(str)+1.(size_t)).(@byte)
  strcpy(res, str)
  ret res
}

fn byte:cpy(){
	ret str::alc($)
}

fn byte:to_arr(){
	res = [?0]byte
}

